buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
        kotlinVersion = '1.0.2'
    }
    repositories {
        maven {
            url 'http://maven.oschina.net/content/groups/public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'application'

jar {
    baseName = 'auto-platfrom-services'
    version = '0.1-SNAPSHOT'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {

//    maven {
//        url 'http://maven.oschina.net/content/groups/public/'
//    }
    mavenCentral()
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-websocket'
    compile 'org.springframework.boot:spring-boot-autoconfigure'

    compile 'org.springframework.boot:spring-boot-starter-redis'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'net.lightbody.bmp:browsermob-core-littleproxy:2.1.0-beta-4'
    compile 'org.seleniumhq.selenium:selenium-api:2.53.0'
    compile 'org.jsoup:jsoup:1.9.2'

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.7.4'

    optional 'org.springframework.boot:spring-boot-configuration-processor'

}

compileJava.dependsOn(processResources)

def findAlpn() {
    def depsFile=project.file("deps/")
    def alpnPath=null
    if(depsFile.exists()){
        alpnPath= depsFile.list().find {
            it.startsWith("alpn-boot-") && it.endsWith(".jar")
        }
    }
    if(alpnPath != null){
        alpnPath=depsFile.absolutePath+File.separator+alpnPath
    }
    alpnPath
}


bootRun{
    def path=findAlpn()
    if(path != null){
        applicationDefaultJvmArgs = ["-Xbootclasspath/p:"+path]
    }
}

springBoot {
    mainClass = "com.zzzmode.platfrom.AppPlatfromServiceApplicationKt"
}



